/*
Problem Description

Given a string A, find if there is any subsequence that repeats itself.




A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

NOTE:
1. Subsequence length should be greater than or equal to 2.
2. The repeating subsequence should be disjoint that is in both the sequence no character in the same order and position should be taken from the same index of the original string.






Problem Constraints

1 <= length(A) <= 100



Input Format

The first and the only argument of input contains a string A.



Output Format

Return an integer, 1 if there is any subsequence which repeat itself else return 0.



Example Input

Input 1:

 A = "abab"
Input 2:

 A = "abba"


Example Output

Output 1:

 1
Output 2:

 0


Example Explanation

Explanation 1:

 "ab" is repeated.
Explanation 2:

 There is no repeating subsequence.

*/

int lcs_modification(string A, string B) {
    if (A.size() > B.size()) return lcs_modification(B, A);

    vector<int> prev(B.size()+1, 0);
    vector<int> curr(B.size()+1, 0);
    int res = 0;

    for (int i = 1; i <= A.size(); i++) {
        for (int j = 1; j <= B.size(); j++) {
            if (A[i-1] == B[j-1] && i != j) curr[j] = 1 + prev[j-1];
            else curr[j] = max(prev[j], curr[j-1]);
            res = max(res, curr[j]);
        }

        prev = curr;
    }

    return res;
}
int Solution::anytwo(string A) {
    if (lcs_modification(A,A) >= 2) return 1;
    return 0;
}
